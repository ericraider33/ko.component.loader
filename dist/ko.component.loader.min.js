!function(factory){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?factory(require("knockout"),exports):"function"==typeof define&&define.amd?define(["knockout","exports"],factory):factory(ko,ko.componentLoader={})}(function(ko,exports){function attachedInit(element,valueAccessor,allBindings,viewModel,bindingContext){"parent"===valueAccessor()&&(element=element.parentNode),viewModel.attached&&viewModel.attached(element),ko.componentLoader&&ko.componentLoader.onComponentAttached(viewModel)}function attachedHandlerInit(element,valueAccessor){var handler=valueAccessor();handler(element)}function buildLoader(xOptions,xExports){function addComponent(path,options){options=options||{};var name=path.replace(/^.*\//,"");name=camelCaseToDash(name),ko.components.register(name,{require:path});var component={name:name,path:path,isLoaded:!1,noWait:options.noWait?!0:!1};self.components.push(component),options.root?self.root({name:name,params:options.params||{}}):options.dialog&&self.dialogs.push({name:name,params:options.params||{}})}function onComponentAttached(viewModel){var name=viewModel.constructor.name||viewModel.constructor.toString().match(/function (\w*)/)[1];name=camelCaseToDash(name);var component=findComponent(name);if(!component)return void(verbose&&console.log("Component not found. Ignoring attached event for component "+name));if(component.isLoaded=!0,component.viewModel=viewModel,verbose&&console.log("Loaded component "+name+"	Outstanding "+retrieveOutstanding().join()),self.loading()){var loaded=isAllLoaded();if(loaded){verbose&&console.log("Page ready");var root=findRoot();loadedCallback?self.loading(loadedCallback(self)||!1):root&&root.viewModel&&"function"==typeof root.viewModel.handleOnLoaded?self.loading(root.viewModel.handleOnLoaded(self)||!1):self.loading(!1)}}}function findRoot(){var root=self.root();return root&&root.name?findComponent(root.name):null}function findComponent(name){for(var components=self.components(),i=0;i<components.length;i++){var component=components[i];if(component.name==name)return component}return null}function isAllLoaded(){return 0===retrieveOutstanding().length}function retrieveOutstanding(){for(var result=[],components=self.components(),i=0;i<components.length;i++)components[i].isLoaded||components[i].noWait||result.push(components[i].name);return result}function setLoadedCallback(callback){loadedCallback=callback}function setOptions(options){"undefined"!=typeof options.verbose&&(verbose=options.verbose?!0:!1),"undefined"!=typeof options.loadedCallback&&(loadedCallback=options.loadedCallback)}function resetAsDefault(){ko.componentLoader=self,self.loading(!0);for(var components=self.components(),i=0;i<components.length;i++)components[i].isLoaded=!1}function camelCaseToDash(text){if("string"!=typeof text||text.length<2)return text;for(var last=" ",result="",i=0;i<text.length;i++){var x=text.charAt(i);last.match(/[A-Za-z]/)&&x.match(/[A-Z]/)&&(result+="-"),result+=x.toLowerCase(),last=x}return result}var loadedCallback,verbose,self=xExports||{};return self.loading=ko.observable(!0),self.components=ko.observableArray([]),self.root=ko.observable(),self.dialogs=ko.observableArray([]),self.addComponent=addComponent,self.onComponentAttached=onComponentAttached,self.buildLoader=buildLoader,self.setLoadedCallback=setLoadedCallback,self.setOptions=setOptions,self.resetAsDefault=resetAsDefault,"object"==typeof xOptions&&setOptions(xOptions),self}if(void 0===typeof ko)throw"Knockout is required, please ensure it is loaded before using componentLoader plug-in";ko.componentLoader=buildLoader(void 0,exports),ko.bindingHandlers.attached={init:attachedInit},ko.bindingHandlers.attachedHandler={init:attachedHandlerInit}});